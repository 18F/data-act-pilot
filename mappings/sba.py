import csv

def getFundingOfficeName(record):
    """This field is generated by adding 'itemacct.acctfield3' and 'addr.name'"""

    return record['itemacct.acctfield3'] + record['addr.name']

def getObligatedAmount(record):
    """This field is generated by multiplying 'po_lines_all.quantity' by 'po_lines_all.unit_price'"""

    return float(record['po_lines_all.quantity']) * float(record['po_lines_all.unit_price'])

def getOutlayAmount(record):
    """po_distributions_all.quantity_billed"""
    return float(record['po_distributions_all.quantity_billed'])

def getNonFederalFundingAmount(record):
    """This field is generated by adding 'grantheader.sba1222personalservicenf',
        'grantheader.sba1222fringebenefitsnf', 'grantheader.sba1222consultantsnf',
        'grantheader.sba1222travelnf', grantheader.sba1222equipmentnf',
        'grantheader.sba1222suppliesnf', 'grantheader.sba1222contractualnf',
        'grantheader.sba1222othernf', 'grantheader.sba1222indcostnf',
        and 'grantheader.sba1222othercostnf'"""

    def addFloats(x, y):
        return float(x) + float(y)
    ffaFields = [record['grantheader.sba1222personalservicenf'],
        record['grantheader.sba1222fringebenefitsnf'],
        record['grantheader.sba1222consultantsnf'],
        record['grantheader.sba1222travelnf'],
        record['grantheader.sba1222equipmentnf'],
        record['grantheader.sba1222suppliesnf'],
        record['grantheader.sba1222contractualnf'],
        record['grantheader.sba1222othernf'],
        record['grantheader.sba1222indcostnf'],
        record['grantheader.sba1222othercostnf']]
    return addFloats(ffaFields)

schema_map = {

    #fields from awardee message
    'award.awardees[0].businessName': 'docvendor.Name',
    'award.awardees[0].DUNSNumber': 'docvendor.duns',
    'award.awardees[0].DUNSPlusFour': 'docvendor.DUNSPLUS4',
    'award.awardees[0].parentDUNSNumber': None,
    'award.awardees[0].parentBusinessName': None,
    'award.awardees[0].businessCongressionalDistrict': 'grantheader.sba1222congdistno',
    'award.awardees[0].businessType': 'faadsciv.recipienttype',
    'award.awardees[0].highlyCompensatedOfficer': None,

    #fields from address message
    'award.awardees[0].businessName': 'docvendor.name', 
    'award.awardees[0].businessAddress.street1': 'docvendor.address1',
    'award.awardees[0].businessAddress.street2': 'docvendor.address2',
    'award.awardees[0].businessAddress.street3': 'docvendor.address3',
    'award.awardees[0].businessAddress.city': 'docvendor.city',
    'award.awardees[0].businessAddress.state': 'docvendor.state',
    'award.awardees[0].businessAddress.postalCode': 'docvendor.zip',
    'award.awardees[0].businessAddress.USZipCodePlusFour': 'docvendor.zip',
    'award.awardees[0].businessAddress.countryName': 'grantheader.recipientcountryname', 
    'award.awardees[0].businessAddress.countryCode': 'grantheader.recipientcountrycode',

    #fields from award message
    'award.fundingActionObligation.amount': getObligatedAmount, #'header.obligatedamt', #prism, is table name correct?
    'award.fundingActionObligation.currency': 'USD', #assuming all SBA is in US Dollars
    'award.nonFederalFundingAmount.amount': getObligatedAmount, #getNonFederalFundingAmount,  #changed in subsequent SBA mapping
    'award.nonFederalFundingAmount.currency': 'USD',
    'award.currentTotalFundingObligationAmount.amount': getObligatedAmount, #'header.obligatedamt',
    'award.currentTotalFundingObligationAmount.currency': 'USD',
    'award.currentTotalValue.amount': getObligatedAmount, #'header.amount',
    'award.currentTotalValue.currency': 'USD',
    'award.potentialTotalValue.amount': getObligatedAmount, #'header.amount',
    'award.potentialTotalValue.currency': 'USD',
    'award.typeOfTransactionCode': 'faadsciv.assistancetranstype', #'header.awardtype', #MISSING from proto files, or named differently (line 21 in sba mapping excel)
    'award.fundingAgency.agencyName': 'Small Business Administration',
    'award.fundingAgency.agencyCode': '73',
    'award.fundingAgency.subTierAgencyName': 'Small Business Administration',
    'award.fundingAgency.subTierAgencyCode': '73',
    'award.fundingAgency.officeName': 'itemacct.acctfield3', #getFundingOfficeName (unsure if this applies to grants),
    'award.fundingAgency.officeCode': 'gl_code_combinations.segment3', #unsure if this applies to grants
    
    'award.awardingAgency.officeName': 'docaddr.name',
    'award.awardingAgency.officeCode': 'header.issuingdocaddresskey',
    

    'award.NAICSCode': 'header.primarysiccode',
    'award.NAICSCodeDescription':  'naicssicdata.descr',
    'award.CFDAProgramNumber': 'faadsciv.cfdaprogramnumber',
    'award.CFDAProgramTitle': 'faadsciv.cfdaprogramtitle',
    
    'award.awardDescription': 'po_lines_all.item_description',
    'award.awardNumber': 'po_headers_all.segment1',
    'award.actionDate': 'header.awarddate',
    'award.periodOfPerformanceStart': 'po_distributions_all.attribute10',
    'award.periodOfPerformanceCurrentEnd': 'po_distributions_all.attribute11',
    'award.periodOfPerformancePotentialEnd': None,


    #on AgencyTransaction message
    'transaction.treasuryAccountSymbol.mainAccount': 'itemacct.tas#', #jaams
    'transaction.treasuryAccountSymbol.subAccount': None, #currently not mapped
    'transaction.objectClass': 'gl_code_combinations.segment5',
    'transaction.programActivity': 'gl_code_combinations.segment4', 
    'transaction.outlays[0].amount': getOutlayAmount,
    'transaction.outlays[0].currency': 'USD',

    #on Action
    'recordType': 'faadsciv.recordtype',
}


def export_as_csv():
    #export as a csv for SBA users
    outfile = csv.writer(open('mappings/sba.csv', 'w'))
    outfile.writerow(['DATA Act schema attribute name', 'SBA field or function'])

    for k, v in schema_map.items():
        if callable(v):
            outfile.writerow([k, v.__doc__])
        else:
            outfile.writerow([k, v])





